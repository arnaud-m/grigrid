#!/bin/sh
###################################################
#     Copyright (C) 2011 Arnaud Malapert.
#
#     This program is free software: you can redistribute it and/or modify                    
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
###################################################

PROG=`basename $0 .sh`
version() {
cat <<EOF
$PROG 0.1
     
Copyright (C) 2011 Arnaud Malapert.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This  is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.
EOF
}

help() {
cat <<EOF
$0 summarizes results of jobs (files .o and .e) of multiple directories BENCH(s). \
$0 generate three files for each directory BENCH (explored recursivly).
A file BENCH-e.log is created from all error files .e. 
An archive BENCH-o from all output files .o ;  
A file BENCH.res summarizes all results.     

The results file (.res) is formatted as follows.   
Each line represents an entry, i.e. a resolution of an instance, with the exception of the first line which contain the column labels.
An entry has a fixed number of columns delimited by '|' (pretty print).  
The first columns are defined as follows: $AWK_LABELS.
  
Usage: $0 [OPTION]... BENCH...
     
Options:
   -a, --awk[=FILE]
                         Additional columns defined by an awk user script.

  --help        display this help and exit
  --version     output version information and exit
   
Report bugs to <arnaud (dot) malapert (at) unice (dot) com>."
EOF
}

#--------------------------------------------------------------------
# Setup Global Variables
#--------------------------------------------------------------------

CORE_AWK=~/.grigrid/read-o.awk

#--------------------------------------------------------------------
# Test for prerequisites
#--------------------------------------------------------------------


if [ $# -eq 0 ] || [ $1 = "--help" ]; then
    help
    exit 0
elif [ $1 = "--version" ]; then
    version
    exit 0
elif [ $1 = "-a" ] || [ $1 = "--awk" ]; then
    if [ -f $2 ]; then
	USER_AWK=$2;   
	echo "awk user script: $USER_AWK."
    else
	echo "awk script ignored: $2."
    fi  
    shift 2
fi


#--------------------------------------------------------------------
# Do something
#--------------------------------------------------------------------

#create header of result files and awk command 
AWK_CMD="awk  -f $CORE_AWK"
if [ $USER_AWK ]; then
    AWK_CMD="$AWK_CMD  -f $USER_AWK"
    HEADER=`sed -n 2p $USER_AWK`
    HEADER=${HEADER:1}
fi

HEADER=`sed -n 2p $CORE_AWK`$HEADER

#Read directories
for DIR in "$@" 
do 
    if [ -d $DIR ] ;	then
	echo "entering in $DIR"
	FNAME=`basename $(readlink -nf $DIR)`
	TAR=$FNAME-o.tar.gz
        echo "compress files .o ..."
       	find $DIR -name \*.o | xargs tar czf $TAR $DIR/*.properties
        echo "generate error log ..."
 	find $DIR  -name *.e  -print0 | xargs -0 cat > $FNAME-e.log
       #generate .res
	echo "generate results file ..."
	#summarize results 
	find $DIR -type f -name '*.o' -execdir $AWK_CMD  --source 'END{print "";}' '{}' \;  | sort | sed  "1i$HEADER"  |  column -s '~' -t > $FNAME.res
	echo "generate results $DIR [OK]" 
    else
	echo "generate results $DIR [FAIL]" 
    fi
done


