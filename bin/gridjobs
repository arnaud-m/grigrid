#!/bin/bash
###################################################
#     Copyright (C) 2013-2020 Arnaud Malapert (Université Côte d'Azur, I3S, CNRS).
#
#     This program is free software: you can redistribute it and/or modify                    
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
###################################################


#--------------------------------------------------------------------
# Setup Global Variables
#--------------------------------------------------------------------

PROG=`basename $0 .sh`
ALGORITHMS=algorithms
INSTANCES=instances
RESULTS=results
SOLVER=./solver.sh;

ERRFILE=oar-stderr.log

#Option arguments
PATTERN='*'
RANDOMSEED=$$
SUBMODE=0
DRYMODE=0

#--------------------------------------------------------------------
# Version and help messages
#--------------------------------------------------------------------

version() {
cat <<EOF
$PROG 0.3
     
Copyright (C) 2013-2020 Arnaud Malapert (Université Côte d'Azur, I3S, CNRS).
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
EOF
}

help() {
cat <<EOF
$PROG generates new jobs for the batch scheduler OAR. $PROG operates in the current directory.
For each solver configuration file in the flat directory '$ALGORITHMS', and for each file matching the pattern in the subdirectories of '$INSTANCES', $PROG submits a new job based on the shell script $SOLVER.

All error outputs are redirected to the file $ERRFILE.
For each algorithm and each instance file, the standard output is redirected to a file .o in the directory '$RESULTS'.

Usage: $PROG [OPTION]... 

Options:
 -p 'PATTERN'   filename pattern for instances   
 -s  SEED       random seed  
 
 -l             shell submissions on localhost (default)
 -g             grid submission with OAR

 -d  FMT        dry run, only print submissions in the given format   
 -n             do not create the directories in a dry run

 -h             display this help and exit
 -v             output version information and exit
     
Report bugs to <arnaud (dot) malapert (at) univ-cotedazur (dot) fr>."
EOF
}


#--------------------------------------------------------------------
# Test for prerequisites
#--------------------------------------------------------------------



while getopts ":p:s:lgd:nhv" opt; do
    case $opt in
        p)
            PATTERN=$OPTARG
            ;;
        s)
            RANDOMSEED=$OPTARG
            ;;
        l)
            SUBMODE=0
            ;;
        g)
            SUBMODE=1
            ;;
        d)
            SUBMODE=$(($OPTARG + 2))
            ;;
        n)
            DRYMODE=1
            ;;
        h)
            help 
            exit 0
            ;;
        v)
            version;
            exit 0
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
    esac
done


#--------------------------------------------------------------------
# Do something
#--------------------------------------------------------------------

###################################### 
# Check that oarsub is installed.
# Otherwise, ask for shell submissions
if [ $SUBMODE -eq 1 ] ; then
    if which oarsub > /dev/null ; then
        #do nothing command
        ## TODO Create log here 
        :
    else
        read -p "execute jobs on localhost (y/n) ? " -n 1 -r
        echo    # (optional) move to a new line
        if [[ ! $REPLY =~ ^[Yy]$ ]]
        then
            exit 1
        fi
        SUBMODE=0
    fi     
fi

###################################### 
# Check if dry mode is possible.
if  [ $SUBMODE -le 1 ]  ; then
    DRYMODE=0
fi

####################################
# Create results directories if not in dry mode
if [ $DRYMODE -eq 0 ] ; then
    rm -fr $RESULTS $ERRFILE
    mkdir $RESULTS
    
    # copy instances directory struture into a temporary directory
    TMPDIR=`mktemp -d gridjobs_XXXXX`
    find  -H $INSTANCES/  -type d -print0 | while read -d $'\0' FILE
    do
        mkdir -p $TMPDIR/${FILE#$INSTANCES/}
    done
    
    # copy instances directory struture for each algorithm
    for ALGO in `ls $ALGORITHMS` ; do
        ALGODIR=$RESULTS/${ALGO%.*}
        cp -a $TMPDIR $ALGODIR
    done
    rm -fr $TMPDIR

    if [  $SUBMODE -eq 0 ] ; then
        OARLOG=`mktemp oar-sub_XXX.log`
    fi   
fi  

###############################
# generate one job for each instance and for each algorithm
find  -H $INSTANCES  -type f -name "$PATTERN" -print0 | while read -d $'\0' BENCHPATH
do
    for ALGOPATH in `ls $ALGORITHMS/*` ; do
        ADIR=`basename $ALGOPATH`;
        OUTFILE=${BENCHPATH%.*}.o
        OUTFILE=${OUTFILE#$INSTANCES/} 
        OUTFILE=$RESULTS/${ADIR%.*}/$OUTFILE
        JOBCMD="$SOLVER $ALGOPATH $BENCHPATH $RANDOMSEED"
        OARCMD="oarsub --stderr $ERRFILE --stdout $OUTFILE -S "
        case $SUBMODE in 
            ## Shell submission on localhost
            0) $JOBCMD > $OUTFILE 2>> $ERRFILE;;
            ## OAR submission on a cluster
            1) $OARCMD "$JOBCMD" | tee -a $OARLOG;;
            ## print shell submission
            2) echo "$JOBCMD > $OUTFILE 2>> $ERRFILE";;
            ## print oar submission
            3) echo "$OARCMD $JOBCMD";;
            ## print job command 
            4) echo $JOBCMD;;
            *) echo "Invalid submission mode"
               exit 1
               ;;
	    esac
    done
done


