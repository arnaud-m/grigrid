#!/bin/sh
###################################################
#     Copyright (C) 2011 Arnaud Malapert.
#
#     This program is free software: you can redistribute it and/or modify                    
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
###################################################

PROG=`basename $0 .sh`
version() {
cat <<EOF
$PROG 0.1
     
Copyright (C) 2011 Arnaud Malapert.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
EOF
}

help() {
cat <<EOF
$PROG generates new jobs (shell script) for the batch server. 
For each 'file' matching PATTERN in a subdirectory of BENCH, $PROG generates a script 'file.sh' which executes a single command CMD. 
The target file is referenced in CMD by using '{}'. 

For further automatic analysis of the optimization results, we will assume that : 
a) each schell script solves exactly one instance, 
b) the standard output is formatted according to the rules specified in the documentation,
c) The standard and error outputs are redirected to files with extension .o and .e respectivly.

Usage: $PROG [OPTION]... BENCH PATTERN CMD

Options:
 --help        display this help and exit
 --version     output version information and exit
     
Report bugs to <arnaud (dot) malapert (at) unice (dot) fr>."
EOF
}

#--------------------------------------------------------------------
# Setup Global Variables
#--------------------------------------------------------------------

ALGORITHMS=algorithms
INSTANCES=instances
RESULTS=results
SOLVER=./solver.sh;

ERRFILE=oar-stderr.log

RANDOMSEED=$$

PATTERN='*.txt'
#--------------------------------------------------------------------
# Test for prerequisites
#--------------------------------------------------------------------


if [ $# -eq 0 ] || [ $1 = "-h" ]; then
    help
    exit 0
elif [ $1 = "-v" ]; then
    version
    exit 0
# elif [ $# -lt 3 ] ; then
#     help
#     exit 1
fi


SUBT=1;

# if [ $1 = "-s" ] || [ $1 = "--sequential" ] ; then
#     SUBT=1;
#     shift
# elif [ $1 = "-p" ] || [ $1 = "--print" ] ; then
#     SUBT=2;
#     shift
# else
#     SUBT=0;
# fi

#--------------------------------------------------------------------
# Do something
#--------------------------------------------------------------------

rm -fr $RESULTS
mkdir $RESULTS
#####################################
## copy instance directory struture into a temporary directory
TMPDIR=`mktemp -d`
find  $INSTANCES/  -type d -print0 | while read -d $'\0' FILE
do
    mkdir -p $TMPDIR/${FILE#$INSTANCES/}
done

###############################
# copy instance directory struture for each algorithm
for ALGO in `ls $ALGORITHMS` ; do
    ALGODIR=$RESULTS/${ALGO%.*}
    cp -a $TMPDIR $ALGODIR
done

rm -fr $TMPDIR

# submit the resolution of each instance by each algorithm.
find  $INSTANCES  -name $PATTERN -print0 | while read -d $'\0' BENCHPATH
do
    for ALGOPATH in `ls $ALGORITHMS/*` ; do
        ADIR=`basename $ALGOPATH`;
        OUTFILE=${BENCHPATH%.*}.o
        OUTFILE=${OUTFILE#$INSTANCES/} 
        OUTFILE=$RESULTS/${ADIR%.*}/$OUTFILE
        ##TODO print and simulation options
        OARCMD="oarsub --stderr $ERRFILE --stdout $OUTFILE -S \"$SOLVER $ALGOPATH $BENCHPATH $RANDOMSEED\""
        case $SUBT in 
            #serial execution
            1) $SOLVER $ALGOPATH $BENCHPATH $RANDOMSEED > $OUTFILE 2> $ERRFILE;;
            ## grid execution
            2) $OARCMD;;
            ## debug mode (only print command)
            *) echo $OARCMD;;
	    esac
    done
done


