#!/bin/bash
###################################################
#     Copyright (C) 2013-2020 Arnaud Malapert (Université Côte d'Azur, I3S, CNRS).
#
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
###################################################


#--------------------------------------------------------------------
# Setup Global Variables
#--------------------------------------------------------------------

PROG=`basename $0 .sh`
ALGORITHMS=algorithms
INSTANCES=instances
RESULTS=results
SOLVER=./solver.sh;

ERRFILE=oar-stderr.log

#Option arguments
PATTERN='*'
RANDOMSEED=$$

SUBMODE=0
DRYMODE=0

#--------------------------------------------------------------------
# Version and help messages
#--------------------------------------------------------------------

version() {
cat <<EOF
$PROG 0.3

Copyright (C) 2013-2021 Arnaud Malapert (Université Côte d'Azur, I3S, CNRS).
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
EOF
}

help() {
cat <<EOF
$PROG generates jobs that solve a problem instance with a single algorithm. $PROG operates in the current directory.
The jobs can be submitted to localhost or to the batch scheduler OAR.
The job commands can also be printed on the standard output using various format : localhost (0) ; OAR (1) ; raw (2).
For each solver configuration file in the directory '$ALGORITHMS', and for each file matching the pattern in the directory '$INSTANCES', $PROG submits a new job based on the shell script $SOLVER.
Directories are visited recursivly.

All error outputs are redirected to the file $ERRFILE.
For each algorithm and for each instance file, the standard output is redirected to a file .o in the directory '$RESULTS'.

Usage: $PROG [OPTION]...

Options:
 -p 'PATTERN'   filename pattern for instances
 -s 'SEED'       random seed

 -l             shell submissions on localhost (default)
 -g             grid submission with OAR

 -d 'FMT'       dry run, only print submissions in the given format (0-2)
 -n             do not create the directories in a dry run

 -h             display this help and exit
 -v             output version information and exit

Examples:
gridjobs -d 0 -n
gridjobs  -d 0 | nohup parallel -j 5

Report bugs to <arnaud (dot) malapert (at) univ-cotedazur (dot) fr>."
EOF
}


#--------------------------------------------------------------------
# Test for prerequisites
#--------------------------------------------------------------------



while getopts ":p:s:lgd:nhv" opt; do
    case $opt in
        p)
            PATTERN=$OPTARG
            ;;
        s)
            RANDOMSEED=$OPTARG
            ;;
        l)
            SUBMODE=0
            ;;
        g)
            SUBMODE=1
            ;;
        d)
            SUBMODE=$(($OPTARG + 2))
            ;;
        n)
            DRYMODE=1
            ;;
        h)
            help
            exit 0
            ;;
        v)
            version;
            exit 0
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
    esac
done


######################################
# Check that oarsub is installed.
# Otherwise, ask for shell submissions
if [ $SUBMODE -eq 1 ] ; then
    if which oarsub > /dev/null ; then
        #do nothing command
        ## TODO Create log here
        :
    else
        read -p "execute jobs on localhost (y/n) ? " -n 1 -r
        echo    # (optional) move to a new line
        if [[ ! $REPLY =~ ^[Yy]$ ]]
        then
            exit 1
        fi
        SUBMODE=0
    fi
fi

######################################
# Check if dry mode is possible.
if  [ $SUBMODE -le 1 ]  ; then
    DRYMODE=0
fi

###############################
# Create oar log file for saving job ids
if [  $SUBMODE -eq 1 ] ; then
    OARLOG=`mktemp oar-sub_XXX.log`
fi

#--------------------------------------------------------------------
# Do something
#--------------------------------------------------------------------

####################################
# Clean and create results directories if not in dry mode
if [ $DRYMODE -eq 0 ] ; then
    rm -fr $RESULTS $ERRFILE
    mkdir $RESULTS
fi


###############################
# Retrieve the list of algorithms
ALGOLIST=`find algorithms/ -type f  -print`

###############################
# Generate a job for each algorithm and each instance

# Main loop over the instances
find  -H $INSTANCES  -type f -name "$PATTERN" -print0 | while read -d $'\0' BENCHPATH
do
    # Sub loop over the algorithms
    for ALGOPATH in $ALGOLIST ; do
        ## Retrieve algorithm filename without extension
        ALGO=`basename $ALGOPATH`;
        ALGO=${ALGO%.*}
        ## Retrieve algorithm subdirectory
        ADIR=`dirname $ALGOPATH`"/";
        ADIR=${ADIR##$ALGORITHMS/}
        # Build the path of the output file
        OUTFILE=${BENCHPATH%.*}.o
        OUTFILE=${OUTFILE#$INSTANCES/}
        OUTFILE=$RESULTS/$ADIR$ALGO/$OUTFILE
        ## Create the directory for the output file
        if [ $DRYMODE -eq 0 ] ; then
            mkdir -p `dirname $OUTFILE` 2> /dev/null
        fi
        # Create the job command
        JOBCMD="$SOLVER $ALGOPATH $BENCHPATH $RANDOMSEED"
        OARCMD="oarsub --stderr $ERRFILE --stdout $OUTFILE -S "
        # Generate the job
        case $SUBMODE in
            ## Shell submission on localhost
            0) $JOBCMD > $OUTFILE 2>> $ERRFILE
               ;;
            ## OAR submission on a cluster
            1) $OARCMD "$JOBCMD" | tee -a $OARLOG
               ;;
            ## print shell submission
            2) echo "$JOBCMD > $OUTFILE 2>> $ERRFILE"
               ;;
            ## print oar submission
            3) echo "$OARCMD $JOBCMD"
               ;;
            ## print job command
            4) echo $JOBCMD
               ;;
            *) echo "Invalid submission mode"
               exit 1
               ;;
	       esac
    done
done
